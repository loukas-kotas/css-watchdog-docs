{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Things you can do Get computed CSS styles of a page Test if computed CSS styles are the same with your CSS code Get specific computed CSS style of specic element according to its ID (e.g background-color from element with id=\"login-input\") Get screenshot of page Get screenshot of specific element of a page Compare screenshots of different domains Usage Use CLI to take screenshot of a webpage Whole page Part of the page Use the watchdog module in your test files Get computed styles of every element in the page Get computed styles of elements by class name in the page Get computed styles of element by ID Get computed styles of elements by tag name Use Image diffing Get diff of two images Get report of images comparison Installation npm install css-watchdog npm install -g css-watchdog (in case you use CLI) According to the installation you chose the library or/and the CLI will be installed!","title":"Home"},{"location":"#things-you-can-do","text":"Get computed CSS styles of a page Test if computed CSS styles are the same with your CSS code Get specific computed CSS style of specic element according to its ID (e.g background-color from element with id=\"login-input\") Get screenshot of page Get screenshot of specific element of a page Compare screenshots of different domains","title":"Things you can do"},{"location":"#usage","text":"Use CLI to take screenshot of a webpage Whole page Part of the page Use the watchdog module in your test files Get computed styles of every element in the page Get computed styles of elements by class name in the page Get computed styles of element by ID Get computed styles of elements by tag name Use Image diffing Get diff of two images Get report of images comparison","title":"Usage"},{"location":"#installation","text":"npm install css-watchdog npm install -g css-watchdog (in case you use CLI) According to the installation you chose the library or/and the CLI will be installed!","title":"Installation"},{"location":"api/","text":"API 1. Get specific style field on page Method URL Body GET /api/fields/facade { \"source\": \"https://loukaskotas.com\", \"fields\": [ \"font-family\" ] } 2. Get specific style fields of specific tags on page Method URL Body GET /api/fields/tags/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"tags\": [ \"h1\" ] } 3. Get screenshot of specific element on page Method URL Body GET /api/screenshots/element/facade { \"source\": \"https://loukaskotas.com\", \"elementId\": \"experience\" } 4. Get Screenshot of whole page Method URL Body GET /api/screenshots/domain/facade { \"source\": \"http://loukaskotas.com\" } 5. Get all fonts from page Method URL Body GET /api/fonts/facade { \"source\": \"http://loukaskotas.com\" } 6. Compare Two Screenshots Method URL Body GET /api/screenshots/compare/facade { \"source\": \"http://loukaskotas.com\", \"elementId\": \"experience\" } 7. Get specific style fields of specific class on page (not implemented yet) Method URL Body GET /api/fields/class/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"class\": \"section\" }","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#1-get-specific-style-field-on-page","text":"Method URL Body GET /api/fields/facade { \"source\": \"https://loukaskotas.com\", \"fields\": [ \"font-family\" ] }","title":"1. Get specific style field on page"},{"location":"api/#2-get-specific-style-fields-of-specific-tags-on-page","text":"Method URL Body GET /api/fields/tags/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"tags\": [ \"h1\" ] }","title":"2. Get specific style fields of specific tags on page"},{"location":"api/#3-get-screenshot-of-specific-element-on-page","text":"Method URL Body GET /api/screenshots/element/facade { \"source\": \"https://loukaskotas.com\", \"elementId\": \"experience\" }","title":"3. Get screenshot of specific element on page"},{"location":"api/#4-get-screenshot-of-whole-page","text":"Method URL Body GET /api/screenshots/domain/facade { \"source\": \"http://loukaskotas.com\" }","title":"4. Get Screenshot of whole page"},{"location":"api/#5-get-all-fonts-from-page","text":"Method URL Body GET /api/fonts/facade { \"source\": \"http://loukaskotas.com\" }","title":"5. Get all fonts from page"},{"location":"api/#6-compare-two-screenshots","text":"Method URL Body GET /api/screenshots/compare/facade { \"source\": \"http://loukaskotas.com\", \"elementId\": \"experience\" }","title":"6. Compare Two Screenshots"},{"location":"api/#7-get-specific-style-fields-of-specific-class-on-page-not-implemented-yet","text":"Method URL Body GET /api/fields/class/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"class\": \"section\" }","title":"7. Get specific style fields of specific class on page (not implemented yet)"},{"location":"cli/","text":"CLI 1. View help watchdog --help 2. Get screenshot of whole page watchdog screenshot-page <source> <path-to-save> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot Example watchdog screenshot-page https://loukaskotas.com assets 3. Get screenshot of part of the page watchdog screenshot-part-page <source> <path-to-save> <x0> <y0> <x1> <y1> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot x0 starting point x-axis y0 starting point y-axis x1 ending point x-axis y1 ending point y-axis Example watchdog screenshot-part-page https://loukaskotas.com assets 0 0 100 100","title":"CLI"},{"location":"cli/#cli","text":"","title":"CLI"},{"location":"cli/#1-view-help","text":"watchdog --help","title":"1. View help"},{"location":"cli/#2-get-screenshot-of-whole-page","text":"watchdog screenshot-page <source> <path-to-save> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot Example watchdog screenshot-page https://loukaskotas.com assets","title":"2. Get screenshot of whole page"},{"location":"cli/#3-get-screenshot-of-part-of-the-page","text":"watchdog screenshot-part-page <source> <path-to-save> <x0> <y0> <x1> <y1> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot x0 starting point x-axis y0 starting point y-axis x1 ending point x-axis y1 ending point y-axis Example watchdog screenshot-part-page https://loukaskotas.com assets 0 0 100 100","title":"3. Get screenshot of part of the page"},{"location":"lib/","text":"Library Library includes all the functionality with the api in form of functions. Usage In order to use the watchdog library, a new class instance should be created. After that, you can call every available function. Note #1 Every function returns a promise. So you need to handle each function call as a promise. Tip: use async/wait instead of catch/then in every function call. Example const Watchdog = require('css-watchdog'); ... const watchdog = new Watchdog(); const font-size = watchdog.get_attribute_of_element('https://loukaskotas.com', 'about', 'font-size'); Lifecycle Hooks There are two lifecycle hooks: beforeAll --> Before every function call is executed beforeEach --> Before each function call is executes beforeAll It executes once with the Watchdog instance creation. You need to provide it in the constructor while creating a class instance. beforeEach It executes every time before a function call. You need to provide it in the constructor while creating a class instance. Example ``` const beforeEach = function() { console.log('I will execute') }","title":"Library"},{"location":"lib/#library","text":"Library includes all the functionality with the api in form of functions.","title":"Library"},{"location":"lib/#usage","text":"In order to use the watchdog library, a new class instance should be created. After that, you can call every available function. Note #1 Every function returns a promise. So you need to handle each function call as a promise. Tip: use async/wait instead of catch/then in every function call.","title":"Usage"},{"location":"lib/#example","text":"const Watchdog = require('css-watchdog'); ... const watchdog = new Watchdog(); const font-size = watchdog.get_attribute_of_element('https://loukaskotas.com', 'about', 'font-size');","title":"Example"},{"location":"lib/#lifecycle-hooks","text":"There are two lifecycle hooks: beforeAll --> Before every function call is executed beforeEach --> Before each function call is executes","title":"Lifecycle Hooks"},{"location":"lib/#beforeall","text":"It executes once with the Watchdog instance creation. You need to provide it in the constructor while creating a class instance.","title":"beforeAll"},{"location":"lib/#beforeeach","text":"It executes every time before a function call. You need to provide it in the constructor while creating a class instance.","title":"beforeEach"},{"location":"lib/#example_1","text":"``` const beforeEach = function() { console.log('I will execute') }","title":"Example"}]}