{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Things you can do Get computed CSS styles of a page Test if computed CSS styles are the same with your CSS code Get specific computed CSS style of specic element according to its ID (e.g background-color from element with id=\"login-input\") Get screenshot of page Get screenshot of specific element of a page Compare screenshots of different domains Usage Use CLI to take screenshot of a webpage Whole page Part of the page Use the watchdog module in your test files Get computed styles of every element in the page Get computed styles of elements by class name in the page Get computed styles of element by ID Get computed styles of elements by tag name Use Image diffing Get diff of two images Get report of images comparison Installation npm install css - watchdog npm install - g css - watchdog ( in case you use CLI ) According to the installation you chose the library or/and the CLI will be installed!","title":"Home"},{"location":"#things-you-can-do","text":"Get computed CSS styles of a page Test if computed CSS styles are the same with your CSS code Get specific computed CSS style of specic element according to its ID (e.g background-color from element with id=\"login-input\") Get screenshot of page Get screenshot of specific element of a page Compare screenshots of different domains","title":"Things you can do"},{"location":"#usage","text":"Use CLI to take screenshot of a webpage Whole page Part of the page Use the watchdog module in your test files Get computed styles of every element in the page Get computed styles of elements by class name in the page Get computed styles of element by ID Get computed styles of elements by tag name Use Image diffing Get diff of two images Get report of images comparison","title":"Usage"},{"location":"#installation","text":"npm install css - watchdog npm install - g css - watchdog ( in case you use CLI ) According to the installation you chose the library or/and the CLI will be installed!","title":"Installation"},{"location":"api/","text":"API 1. Get specific style field on page Method URL Body GET /api/fields/facade { \"source\": \"https://loukaskotas.com\", \"fields\": [ \"font-family\" ] } 2. Get specific style fields of specific tags on page Method URL Body GET /api/fields/tags/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"tags\": [ \"h1\" ] } 3. Get screenshot of specific element on page Method URL Body GET /api/screenshots/element/facade { \"source\": \"https://loukaskotas.com\", \"elementId\": \"experience\" } 4. Get Screenshot of whole page Method URL Body GET /api/screenshots/domain/facade { \"source\": \"http://loukaskotas.com\" } 5. Get all fonts from page Method URL Body GET /api/fonts/facade { \"source\": \"http://loukaskotas.com\" } 6. Compare Two Screenshots Method URL Body GET /api/screenshots/compare/facade { \"source\": \"http://loukaskotas.com\", \"elementId\": \"experience\" } 7. Get specific style fields of specific class on page (not implemented yet) Method URL Body GET /api/fields/class/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"class\": \"section\" }","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#1-get-specific-style-field-on-page","text":"Method URL Body GET /api/fields/facade { \"source\": \"https://loukaskotas.com\", \"fields\": [ \"font-family\" ] }","title":"1. Get specific style field on page"},{"location":"api/#2-get-specific-style-fields-of-specific-tags-on-page","text":"Method URL Body GET /api/fields/tags/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"tags\": [ \"h1\" ] }","title":"2. Get specific style fields of specific tags on page"},{"location":"api/#3-get-screenshot-of-specific-element-on-page","text":"Method URL Body GET /api/screenshots/element/facade { \"source\": \"https://loukaskotas.com\", \"elementId\": \"experience\" }","title":"3. Get screenshot of specific element on page"},{"location":"api/#4-get-screenshot-of-whole-page","text":"Method URL Body GET /api/screenshots/domain/facade { \"source\": \"http://loukaskotas.com\" }","title":"4. Get Screenshot of whole page"},{"location":"api/#5-get-all-fonts-from-page","text":"Method URL Body GET /api/fonts/facade { \"source\": \"http://loukaskotas.com\" }","title":"5. Get all fonts from page"},{"location":"api/#6-compare-two-screenshots","text":"Method URL Body GET /api/screenshots/compare/facade { \"source\": \"http://loukaskotas.com\", \"elementId\": \"experience\" }","title":"6. Compare Two Screenshots"},{"location":"api/#7-get-specific-style-fields-of-specific-class-on-page-not-implemented-yet","text":"Method URL Body GET /api/fields/class/facade { \"source\": \"http://loukaskotas.com\", \"fields\": [ \"font-family\", \"color\", \"background-color\", \"border\" ], \"class\": \"section\" }","title":"7. Get specific style fields of specific class on page (not implemented yet)"},{"location":"cli/","text":"CLI 1. View help watchdog --help 2. Get screenshot of whole page watchdog screenshot-page <source> <path-to-save> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot Example watchdog screenshot-page https://loukaskotas.com assets 3. Get screenshot of part of the page watchdog screenshot-part-page <source> <path-to-save> <x0> <y0> <x1> <y1> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot x0 starting point x-axis y0 starting point y-axis x1 ending point x-axis y1 ending point y-axis Example watchdog screenshot-part-page https://loukaskotas.com assets 0 0 100 100","title":"CLI"},{"location":"cli/#cli","text":"","title":"CLI"},{"location":"cli/#1-view-help","text":"watchdog --help","title":"1. View help"},{"location":"cli/#2-get-screenshot-of-whole-page","text":"watchdog screenshot-page <source> <path-to-save> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot Example watchdog screenshot-page https://loukaskotas.com assets","title":"2. Get screenshot of whole page"},{"location":"cli/#3-get-screenshot-of-part-of-the-page","text":"watchdog screenshot-part-page <source> <path-to-save> <x0> <y0> <x1> <y1> Parameter Description source url of page to get the screenshot path-to-save where to save the screenshot x0 starting point x-axis y0 starting point y-axis x1 ending point x-axis y1 ending point y-axis Example watchdog screenshot-part-page https://loukaskotas.com assets 0 0 100 100","title":"3. Get screenshot of part of the page"},{"location":"lib/","text":"Library Library includes all the functionality with the api in form of functions. Usage In order to use the watchdog library, a new class instance should be created. After that, you can call every available function. Note #1 Every function returns a promise. So you need to handle each function call as a promise. Tip: use async/wait instead of catch/then in every function call. Example const Watchdog = require ( 'css-watchdog' ); ... const watchdog = new Watchdog (); const font-size = watchdog . get_attribute_of_element ( 'https://loukaskotas.com' , 'about' , 'font-size' ); Puppeteer You can use pure puppeteer functions as it is simply by creating a puppeteer instance through Watchdog Class. const puppeteer = new Watchdog (). puppeteer (); Lifecycle Hooks There are two lifecycle hooks: beforeAll --> Before every function call is executed beforeEach --> Before each function call is executed beforeAll It executes once with the Watchdog instance creation. You need to provide it in the constructor while creating a class instance. beforeEach It executes every time before a function call. You need to provide it in the constructor while creating a class instance. Example const watchdog = new Watchdog (); const puppeteer = new Watchdog (). puppeteer (); // use original puppeteer functionality const pathToSave = 'assets' ; // exists on root const beforeAll = function () { const browser = await puppeteer . launch (); const page = await browser . newPage (); await page . goto ( 'https://example-page.com' ); await page . type ( '#usename' , 'my-username' , { delay : 10 }) // select item with id=username and type 'my-username'. await page . type ( '#password' , 'my-password' , { delay : 10 }) // select item with id=password and type 'my-password'. await page . click ( '#login-button' ); // login on item with id=login-button. await page . waitFor ( 2000 ); // wait for page to load. const cookies = await page . cookies (); // get cookies after successful for later use. jsonfile . writeFileSync ( './assets/cookies.json' , { data : cookies }); // write cookies on file for later use. return browser ; // browser will be used in beforeEach to keep the same session live. } const beforeEach = function () { const cookies = jsonfile . readFileSync ( './assets/cookies.json' ). data ; // read cookies that have been set from beforeAll(). const page = await browser . newPage (); await page . setCookie (... cookies ); // set cookies on new page to avoid further login. return page ; // page will be used from every function of Watchdog Class } Attributes 1. Get specific attributes of every element in source Parameters Parameter Description source: String url to be used attributes: Array [String] Array of attribute names Syntax get_attributes ( source , attributes ) Example const watchdog = new Watchdog (); const result = await watchdog . get_attributes ( 'https://loukaskotas.com' , [ 'font-size' , 'background-color' ]); 2. Get specific attributes of elements by class name Parameters Parameter Description source: String url to be used attributes: Array [String] Array of attribute names className: String Class Name to filter out elements Syntax get_class ( source , attributes , classname ) Example const watchdog = new Watchdog (); const result = await watchdog . get_attributes ( 'https://loukaskotas.com' , [ 'font-size' , 'background-color' ], '.about-block' ); 3. Get specific attribute of element by ID Parameters Parameter Description source: String url to be used elementId: String ID of element as being displayed on the page attribute: String Desired Attribute's value Syntax get_attribute_of_element ( source , elementId , attribute ) Example const watchdog = new Watchdog (); const result = await watchdog . get_attribute_of_element ( 'https://loukaskotas.com' , 'about' , 'font-size' ); 4. Get specific attribute of element by Tag name Parameters Parameter Description source: String url to be used attributes: Array[String] Desired attributes from every tag tags: Array[String] Tags to select from page Syntax get_tags ( source , attributes , tags ) Example const watchdog = new Watchdog (); const result = await watchdog . get_tags ( 'https://loukaskotas.com' , [ 'font-size' , 'background-color' ], [ 'h1' , 'section' , 'p' ]); Visual Regression 1. Get screenshot of whole page Parameters Parameter Description source: String url to be used pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g myproject/assets/images/ --> assets/images Syntax screenshot_whole_page ( source , pathToSave ) Example const watchdog = new Watchdog (); const result = await watchdog . screenshot_whole_page ( 'https://loukaskotas.com' , 'assets' ); 2. Get screenshot of specific part at page Parameters Parameter Description source: String url to be used pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images x0: Number starting point x-axis y0: Number starting point y-axis x1: Number ending point x-axis y1: Number ending point y-axis Syntax screenshot_part_page ( source , pathToSave , x0 , y0 , x1 , y1 ) Example const watchdog = new Watchdog (); const result = await watchdog . screenshot_part_page ( 'https://loukaskotas.com' , 'assets' , 0 , 0 , 100 , 100 ); 3. Get screenshot of specific element Parameters Parameter Description source: String url to be used pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images elementId: String ID of element to screenshot Syntax screenshot_element ( source , pathToSave , elementId ) Example const watchdog = new Watchdog (); const result = await watchdog . screenshot_element ( 'https://loukaskotas.com' , 'assets' , 'experience' ); 4. Compare two images (pixel-to-pixel) Parameters Parameter Description sourceImagePath: String path of source image (prefer relative) targetImagePath: String path of target image (prefer relative) pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images Syntax compare_images ( sourceImagePath , targetImagePath , pathToSave ) Example const watchdog = new Watchdog (); const result = await watchdog . compare_images ( './assets/images/source.png' , './assets/images/target.png' , 'assets' ); 5. Compare two domains Parameters Parameter Description sourceDomain: String url of source domain targetDomain: String url of target domain pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images Syntax compare_domains ( sourceDomain , targetDomain , pathToSave ) Example const watchdog = new Watchdog (); const result = await watchdog . compare_domains ( 'https://mysite.dev.com' , 'https://mysite.prod.com' , 'assets' ); 6. Get specific element's position Parameters Parameter Description page: String url of source domain elementID: String ID of element Syntax get_element_position ( page , elementID ) Example const watchdog = new Watchdog (); const result = await watchdog . get_element_position ( 'https://loukaskotas.com' , 'about' );","title":"Library"},{"location":"lib/#library","text":"Library includes all the functionality with the api in form of functions.","title":"Library"},{"location":"lib/#usage","text":"In order to use the watchdog library, a new class instance should be created. After that, you can call every available function. Note #1 Every function returns a promise. So you need to handle each function call as a promise. Tip: use async/wait instead of catch/then in every function call.","title":"Usage"},{"location":"lib/#example","text":"const Watchdog = require ( 'css-watchdog' ); ... const watchdog = new Watchdog (); const font-size = watchdog . get_attribute_of_element ( 'https://loukaskotas.com' , 'about' , 'font-size' );","title":"Example"},{"location":"lib/#puppeteer","text":"You can use pure puppeteer functions as it is simply by creating a puppeteer instance through Watchdog Class. const puppeteer = new Watchdog (). puppeteer ();","title":"Puppeteer"},{"location":"lib/#lifecycle-hooks","text":"There are two lifecycle hooks: beforeAll --> Before every function call is executed beforeEach --> Before each function call is executed","title":"Lifecycle Hooks"},{"location":"lib/#beforeall","text":"It executes once with the Watchdog instance creation. You need to provide it in the constructor while creating a class instance.","title":"beforeAll"},{"location":"lib/#beforeeach","text":"It executes every time before a function call. You need to provide it in the constructor while creating a class instance.","title":"beforeEach"},{"location":"lib/#example_1","text":"const watchdog = new Watchdog (); const puppeteer = new Watchdog (). puppeteer (); // use original puppeteer functionality const pathToSave = 'assets' ; // exists on root const beforeAll = function () { const browser = await puppeteer . launch (); const page = await browser . newPage (); await page . goto ( 'https://example-page.com' ); await page . type ( '#usename' , 'my-username' , { delay : 10 }) // select item with id=username and type 'my-username'. await page . type ( '#password' , 'my-password' , { delay : 10 }) // select item with id=password and type 'my-password'. await page . click ( '#login-button' ); // login on item with id=login-button. await page . waitFor ( 2000 ); // wait for page to load. const cookies = await page . cookies (); // get cookies after successful for later use. jsonfile . writeFileSync ( './assets/cookies.json' , { data : cookies }); // write cookies on file for later use. return browser ; // browser will be used in beforeEach to keep the same session live. } const beforeEach = function () { const cookies = jsonfile . readFileSync ( './assets/cookies.json' ). data ; // read cookies that have been set from beforeAll(). const page = await browser . newPage (); await page . setCookie (... cookies ); // set cookies on new page to avoid further login. return page ; // page will be used from every function of Watchdog Class }","title":"Example"},{"location":"lib/#attributes","text":"","title":"Attributes"},{"location":"lib/#1-get-specific-attributes-of-every-element-in-source","text":"Parameters Parameter Description source: String url to be used attributes: Array [String] Array of attribute names Syntax get_attributes ( source , attributes ) Example const watchdog = new Watchdog (); const result = await watchdog . get_attributes ( 'https://loukaskotas.com' , [ 'font-size' , 'background-color' ]);","title":"1. Get specific attributes of every element in source"},{"location":"lib/#2-get-specific-attributes-of-elements-by-class-name","text":"Parameters Parameter Description source: String url to be used attributes: Array [String] Array of attribute names className: String Class Name to filter out elements Syntax get_class ( source , attributes , classname ) Example const watchdog = new Watchdog (); const result = await watchdog . get_attributes ( 'https://loukaskotas.com' , [ 'font-size' , 'background-color' ], '.about-block' );","title":"2. Get specific attributes of elements by class name"},{"location":"lib/#3-get-specific-attribute-of-element-by-id","text":"Parameters Parameter Description source: String url to be used elementId: String ID of element as being displayed on the page attribute: String Desired Attribute's value Syntax get_attribute_of_element ( source , elementId , attribute ) Example const watchdog = new Watchdog (); const result = await watchdog . get_attribute_of_element ( 'https://loukaskotas.com' , 'about' , 'font-size' );","title":"3. Get specific attribute of element by ID"},{"location":"lib/#4-get-specific-attribute-of-element-by-tag-name","text":"Parameters Parameter Description source: String url to be used attributes: Array[String] Desired attributes from every tag tags: Array[String] Tags to select from page Syntax get_tags ( source , attributes , tags ) Example const watchdog = new Watchdog (); const result = await watchdog . get_tags ( 'https://loukaskotas.com' , [ 'font-size' , 'background-color' ], [ 'h1' , 'section' , 'p' ]);","title":"4. Get specific attribute of element by Tag name"},{"location":"lib/#visual-regression","text":"","title":"Visual Regression"},{"location":"lib/#1-get-screenshot-of-whole-page","text":"Parameters Parameter Description source: String url to be used pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g myproject/assets/images/ --> assets/images Syntax screenshot_whole_page ( source , pathToSave ) Example const watchdog = new Watchdog (); const result = await watchdog . screenshot_whole_page ( 'https://loukaskotas.com' , 'assets' );","title":"1. Get screenshot of whole page"},{"location":"lib/#2-get-screenshot-of-specific-part-at-page","text":"Parameters Parameter Description source: String url to be used pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images x0: Number starting point x-axis y0: Number starting point y-axis x1: Number ending point x-axis y1: Number ending point y-axis Syntax screenshot_part_page ( source , pathToSave , x0 , y0 , x1 , y1 ) Example const watchdog = new Watchdog (); const result = await watchdog . screenshot_part_page ( 'https://loukaskotas.com' , 'assets' , 0 , 0 , 100 , 100 );","title":"2. Get screenshot of specific part at page"},{"location":"lib/#3-get-screenshot-of-specific-element","text":"Parameters Parameter Description source: String url to be used pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images elementId: String ID of element to screenshot Syntax screenshot_element ( source , pathToSave , elementId ) Example const watchdog = new Watchdog (); const result = await watchdog . screenshot_element ( 'https://loukaskotas.com' , 'assets' , 'experience' );","title":"3. Get screenshot of specific element"},{"location":"lib/#4-compare-two-images-pixel-to-pixel","text":"Parameters Parameter Description sourceImagePath: String path of source image (prefer relative) targetImagePath: String path of target image (prefer relative) pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images Syntax compare_images ( sourceImagePath , targetImagePath , pathToSave ) Example const watchdog = new Watchdog (); const result = await watchdog . compare_images ( './assets/images/source.png' , './assets/images/target.png' , 'assets' );","title":"4. Compare two images (pixel-to-pixel)"},{"location":"lib/#5-compare-two-domains","text":"Parameters Parameter Description sourceDomain: String url of source domain targetDomain: String url of target domain pathToSave: String Path to export Careful! Only middle backslashes allowed. e.g /myproject/assets/images/ --> assets/images Syntax compare_domains ( sourceDomain , targetDomain , pathToSave ) Example const watchdog = new Watchdog (); const result = await watchdog . compare_domains ( 'https://mysite.dev.com' , 'https://mysite.prod.com' , 'assets' );","title":"5. Compare two domains"},{"location":"lib/#6-get-specific-elements-position","text":"Parameters Parameter Description page: String url of source domain elementID: String ID of element Syntax get_element_position ( page , elementID ) Example const watchdog = new Watchdog (); const result = await watchdog . get_element_position ( 'https://loukaskotas.com' , 'about' );","title":"6. Get specific element's position"}]}